import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import Icon from '@/components/ui/icon';

interface Prize {
  id: number;
  name: string;
  rarity: string;
  icon: string;
  chance: number;
}

interface Case {
  id: number;
  name: string;
  price: number;
  icon: string;
  color: string;
  description: string;
  prizes: Prize[];
}

export default function CasesPage() {
  const [selectedCase, setSelectedCase] = useState<Case | null>(null);
  const [isOpening, setIsOpening] = useState(false);
  const [wonPrize, setWonPrize] = useState<Prize | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [balance] = useState(5000);

  const cases: Case[] = [
    {
      id: 1,
      name: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–µ–π—Å',
      price: 50,
      icon: 'üì¶',
      color: 'from-gray-500 to-gray-700',
      description: '–ò–¥–µ–∞–ª–µ–Ω –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤',
      prizes: [
        { id: 1, name: '–ú—è—Å–æ —Ö–∏—â–Ω–∏–∫–∞ x5', rarity: '–û–±—ã—á–Ω—ã–π', icon: 'ü•©', chance: 50 },
        { id: 2, name: '–õ–µ—á–µ–±–Ω—ã–µ —Ç—Ä–∞–≤—ã x3', rarity: '–û–±—ã—á–Ω—ã–π', icon: 'üåø', chance: 30 },
        { id: 3, name: '50 –º–æ–Ω–µ—Ç', rarity: '–ù–µ–æ–±—ã—á–Ω—ã–π', icon: 'ü™ô', chance: 15 },
        { id: 4, name: '–Ø–π—Ü–æ –î–∏–ª–æ—Ñ–æ–∑–∞–≤—Ä–∞', rarity: '–†–µ–¥–∫–∏–π', icon: 'ü•ö', chance: 5 }
      ]
    },
    {
      id: 2,
      name: '–û—Ö–æ—Ç–Ω–∏—á–∏–π –∫–µ–π—Å',
      price: 150,
      icon: 'üéØ',
      color: 'from-green-500 to-green-700',
      description: '–î–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –æ—Ö–æ—Ç–Ω–∏–∫–æ–≤',
      prizes: [
        { id: 1, name: '–ö–∞–ø–∫–∞–Ω', rarity: '–û–±—ã—á–Ω—ã–π', icon: 'ü™§', chance: 40 },
        { id: 2, name: '–Ø–¥ —Ä–∞–ø—Ç–æ—Ä–æ–≤ x2', rarity: '–ù–µ–æ–±—ã—á–Ω—ã–π', icon: '‚ò†Ô∏è', chance: 30 },
        { id: 3, name: '–ü—Ä–∏–º–∞–Ω–∫–∞ –¥–ª—è —Ö–∏—â–Ω–∏–∫–æ–≤', rarity: '–†–µ–¥–∫–∏–π', icon: 'üé£', chance: 20 },
        { id: 4, name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –∫–æ–ø—å–µ', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', icon: 'üó°Ô∏è', chance: 10 }
      ]
    },
    {
      id: 3,
      name: '–ö–µ–π—Å —Ö–∏—â–Ω–∏–∫–∞',
      price: 250,
      icon: 'ü¶ñ',
      color: 'from-red-500 to-red-700',
      description: '–û–ø–∞—Å–Ω—ã–µ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –≤–Ω—É—Ç—Ä–∏',
      prizes: [
        { id: 1, name: '–Ø–π—Ü–æ –ö–∞—Ä–Ω–æ—Ç–∞–≤—Ä–∞', rarity: '–ù–µ–æ–±—ã—á–Ω—ã–π', icon: 'ü•ö', chance: 35 },
        { id: 2, name: '–Ø–π—Ü–æ –ê–ª–ª–æ–∑–∞–≤—Ä–∞', rarity: '–†–µ–¥–∫–∏–π', icon: 'ü•ö', chance: 30 },
        { id: 3, name: '–Ø–π—Ü–æ –°–ø–∏–Ω–æ–∑–∞–≤—Ä–∞', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'ü•ö', chance: 25 },
        { id: 4, name: '–Ø–π—Ü–æ –ì–∏–≥–∞–Ω—Ç–æ–∑–∞–≤—Ä–∞', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', icon: 'ü•ö', chance: 10 }
      ]
    },
    {
      id: 4,
      name: '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –∫–µ–π—Å',
      price: 500,
      icon: 'üëë',
      color: 'from-yellow-500 to-yellow-700',
      description: '–¢–æ–ª—å–∫–æ —Ä–µ–¥–∫–∏–µ –Ω–∞–≥—Ä–∞–¥—ã',
      prizes: [
        { id: 1, name: '500 –º–æ–Ω–µ—Ç', rarity: '–†–µ–¥–∫–∏–π', icon: 'ü™ô', chance: 40 },
        { id: 2, name: '–®–∫—É—Ä–∞ –†–µ–∫—Å–∞', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'ü¶¥', chance: 30 },
        { id: 3, name: '–°–µ—Ä–¥—Ü–µ –∞–ª—å—Ñ–∞-—Ö–∏—â–Ω–∏–∫–∞', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: '‚ù§Ô∏è', chance: 20 },
        { id: 4, name: '–Ø–π—Ü–æ –¢–∏—Ä–∞–Ω–Ω–æ–∑–∞–≤—Ä–∞', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', icon: 'ü•ö', chance: 10 }
      ]
    },
    {
      id: 5,
      name: '–ö–µ–π—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è',
      price: 100,
      icon: '‚õ∫',
      color: 'from-blue-500 to-blue-700',
      description: '–í—Å—ë –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è',
      prizes: [
        { id: 1, name: '–ü–∞–ª–∞—Ç–∫–∞', rarity: '–û–±—ã—á–Ω—ã–π', icon: 'üèïÔ∏è', chance: 35 },
        { id: 2, name: '–ê–ø—Ç–µ—á–∫–∞ x3', rarity: '–ù–µ–æ–±—ã—á–Ω—ã–π', icon: 'üíä', chance: 35 },
        { id: 3, name: '–ó–∞–ø–∞—Å –µ–¥—ã x10', rarity: '–†–µ–¥–∫–∏–π', icon: 'üçñ', chance: 20 },
        { id: 4, name: '–ù–∞–±–æ—Ä –≤—ã–∂–∏–≤–∞–ª—å—â–∏–∫–∞', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'üéí', chance: 10 }
      ]
    },
    {
      id: 6,
      name: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å',
      price: 350,
      icon: 'üîÆ',
      color: 'from-purple-500 to-purple-700',
      description: '–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã',
      prizes: [
        { id: 1, name: '–ê–º—É–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è', rarity: '–ù–µ–æ–±—ã—á–Ω—ã–π', icon: 'üíé', chance: 35 },
        { id: 2, name: '–ó–µ–ª—å–µ —Å–∏–ª—ã', rarity: '–†–µ–¥–∫–∏–π', icon: 'üß™', chance: 30 },
        { id: 3, name: '–ö—Ä–∏—Å—Ç–∞–ª–ª –∑–∞—â–∏—Ç—ã', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'üí†', chance: 25 },
        { id: 4, name: '–î—Ä–µ–≤–Ω–∏–π —Ç–æ—Ç–µ–º', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', icon: 'üóø', chance: 10 }
      ]
    },
    {
      id: 7,
      name: '–í–æ–¥–Ω—ã–π –∫–µ–π—Å',
      price: 200,
      icon: 'üåä',
      color: 'from-cyan-500 to-cyan-700',
      description: '–ú–æ—Ä—Å–∫–∏–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞',
      prizes: [
        { id: 1, name: '–ö–ª—ã–∫ –ú–µ–≥–∞–ª–æ–¥–æ–Ω–∞', rarity: '–ù–µ–æ–±—ã—á–Ω—ã–π', icon: 'ü¶∑', chance: 40 },
        { id: 2, name: '–ñ–µ–º—á—É–∂–∏–Ω–∞', rarity: '–†–µ–¥–∫–∏–π', icon: 'ü¶™', chance: 30 },
        { id: 3, name: '–Ø–π—Ü–æ –ú–æ–∑–∞–∑–∞–≤—Ä–∞', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'ü•ö', chance: 20 },
        { id: 4, name: '–ö–æ—Ä–æ–Ω–∞ –ü–æ—Å–µ–π–¥–æ–Ω–∞', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', icon: 'üëë', chance: 10 }
      ]
    },
    {
      id: 8,
      name: '–ë–æ–µ–≤–æ–π –∫–µ–π—Å',
      price: 300,
      icon: '‚öîÔ∏è',
      color: 'from-orange-500 to-orange-700',
      description: '–û—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—è',
      prizes: [
        { id: 1, name: '–ö–æ—Å—Ç—è–Ω–æ–π –º–µ—á', rarity: '–ù–µ–æ–±—ã—á–Ω—ã–π', icon: 'üó°Ô∏è', chance: 35 },
        { id: 2, name: '–©–∏—Ç –∏–∑ –∫–æ—Å—Ç–µ–π', rarity: '–†–µ–¥–∫–∏–π', icon: 'üõ°Ô∏è', chance: 30 },
        { id: 3, name: '–ë—Ä–æ–Ω—è —Ö–∏—â–Ω–∏–∫–∞', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'ü¶∫', chance: 25 },
        { id: 4, name: '–ö–ª–∏–Ω–æ–∫ –†–µ–∫—Å–∞', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', icon: '‚öîÔ∏è', chance: 10 }
      ]
    },
    {
      id: 9,
      name: '–ö–µ–π—Å –±–æ–≥–∞—Ç—Å—Ç–≤–∞',
      price: 400,
      icon: 'üí∞',
      color: 'from-amber-500 to-amber-700',
      description: '–¢–æ–ª—å–∫–æ –≤–∞–ª—é—Ç–∞',
      prizes: [
        { id: 1, name: '200 –º–æ–Ω–µ—Ç', rarity: '–ù–µ–æ–±—ã—á–Ω—ã–π', icon: 'ü™ô', chance: 40 },
        { id: 2, name: '500 –º–æ–Ω–µ—Ç', rarity: '–†–µ–¥–∫–∏–π', icon: 'ü™ô', chance: 30 },
        { id: 3, name: '1000 –º–æ–Ω–µ—Ç', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'ü™ô', chance: 20 },
        { id: 4, name: '2500 –º–æ–Ω–µ—Ç', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', icon: 'ü™ô', chance: 10 }
      ]
    },
    {
      id: 10,
      name: '–ê–ª—å—Ñ–∞ –∫–µ–π—Å',
      price: 1000,
      icon: '‚≠ê',
      color: 'from-pink-500 to-pink-700',
      description: '–°–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π –∫–µ–π—Å',
      prizes: [
        { id: 1, name: '–Ø–π—Ü–æ –ò–Ω–¥–æ–º–∏–Ω—É—Å–∞', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'ü•ö', chance: 45 },
        { id: 2, name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –±—Ä–æ–Ω—è', rarity: '–≠–ø–∏—á–µ—Å–∫–∏–π', icon: 'ü¶∫', chance: 30 },
        { id: 3, name: '5000 –º–æ–Ω–µ—Ç', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', icon: 'ü™ô', chance: 15 },
        { id: 4, name: '–¢–∏—Ç—É–ª "–ê–ª—å—Ñ–∞"', rarity: '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π', icon: 'üèÜ', chance: 10 }
      ]
    }
  ];

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case '–û–±—ã—á–Ω—ã–π': return 'text-gray-400';
      case '–ù–µ–æ–±—ã—á–Ω—ã–π': return 'text-green-400';
      case '–†–µ–¥–∫–∏–π': return 'text-blue-400';
      case '–≠–ø–∏—á–µ—Å–∫–∏–π': return 'text-purple-400';
      case '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π': return 'text-yellow-400';
      case '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π': return 'text-pink-400';
      default: return 'text-gray-400';
    }
  };

  const getRarityBadgeVariant = (rarity: string) => {
    switch (rarity) {
      case '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π': 
      case '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π': 
        return 'default';
      case '–≠–ø–∏—á–µ—Å–∫–∏–π': 
        return 'secondary';
      case '–†–µ–¥–∫–∏–π': 
        return 'destructive';
      default: 
        return 'outline';
    }
  };

  const openCase = (caseItem: Case) => {
    if (balance < caseItem.price) {
      return;
    }

    setSelectedCase(caseItem);
    setIsOpening(true);
    setWonPrize(null);
    setShowResult(false);

    const random = Math.random() * 100;
    let cumulative = 0;
    let selectedPrize = caseItem.prizes[0];

    for (const prize of caseItem.prizes) {
      cumulative += prize.chance;
      if (random <= cumulative) {
        selectedPrize = prize;
        break;
      }
    }

    setTimeout(() => {
      setWonPrize(selectedPrize);
      setIsOpening(false);
      setShowResult(true);
    }, 3000);
  };

  const closeDialog = () => {
    setSelectedCase(null);
    setShowResult(false);
    setWonPrize(null);
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-4xl font-bold mb-4">üì¶ –ö–µ–π—Å—ã</h2>
        <p className="text-muted-foreground">–û—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∏ –ø–æ–ª—É—á–∞–π —Ü–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã!</p>
      </div>

      <Card>
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="text-3xl">üí∞</div>
              <div>
                <div className="text-sm text-muted-foreground">–í–∞—à –±–∞–ª–∞–Ω—Å</div>
                <div className="text-2xl font-bold text-primary">{balance} ü™ô</div>
              </div>
            </div>
            <Button variant="outline">
              <Icon name="Plus" size={16} className="mr-2" />
              –ü–æ–ø–æ–ª–Ω–∏—Ç—å
            </Button>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {cases.map((caseItem) => (
          <Card 
            key={caseItem.id} 
            className="hover:shadow-lg transition-all duration-300 cursor-pointer group"
            onClick={() => openCase(caseItem)}
          >
            <CardHeader>
              <div className={`w-full h-32 bg-gradient-to-br ${caseItem.color} rounded-lg flex items-center justify-center text-6xl group-hover:scale-110 transition-transform duration-300`}>
                {caseItem.icon}
              </div>
            </CardHeader>
            <CardContent className="space-y-3">
              <div>
                <CardTitle className="text-xl">{caseItem.name}</CardTitle>
                <CardDescription className="text-sm">{caseItem.description}</CardDescription>
              </div>
              
              <div className="space-y-2">
                <div className="text-xs text-muted-foreground">–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</div>
                <div className="flex flex-wrap gap-1">
                  {caseItem.prizes.map((prize) => (
                    <div 
                      key={prize.id} 
                      className={`text-lg ${getRarityColor(prize.rarity)}`}
                      title={prize.name}
                    >
                      {prize.icon}
                    </div>
                  ))}
                </div>
              </div>

              <Button 
                className="w-full" 
                disabled={balance < caseItem.price}
              >
                –û—Ç–∫—Ä—ã—Ç—å –∑–∞ {caseItem.price} ü™ô
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>

      <Dialog open={selectedCase !== null} onOpenChange={closeDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle className="text-2xl flex items-center space-x-2">
              <span>{selectedCase?.icon}</span>
              <span>{selectedCase?.name}</span>
            </DialogTitle>
            <DialogDescription>
              {isOpening ? '–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å...' : showResult ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–∏–≥—Ä—ã—à–µ–º!' : ''}
            </DialogDescription>
          </DialogHeader>

          {isOpening && (
            <div className="py-12 text-center">
              <div className="animate-bounce text-8xl mb-4">{selectedCase?.icon}</div>
              <div className="flex items-center justify-center space-x-2">
                <Icon name="Loader2" size={24} className="animate-spin text-primary" />
                <span className="text-lg">–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å...</span>
              </div>
            </div>
          )}

          {showResult && wonPrize && (
            <div className="space-y-6">
              <div className="text-center py-8 bg-gradient-to-br from-primary/20 to-accent/20 rounded-lg">
                <div className="text-8xl mb-4">{wonPrize.icon}</div>
                <h3 className="text-3xl font-bold mb-2">{wonPrize.name}</h3>
                <Badge variant={getRarityBadgeVariant(wonPrize.rarity)} className="text-lg px-4 py-1">
                  {wonPrize.rarity}
                </Badge>
              </div>

              <div className="space-y-3">
                <div className="text-sm font-semibold">–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã –∏–∑ —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞:</div>
                <div className="grid grid-cols-2 gap-2">
                  {selectedCase?.prizes.map((prize) => (
                    <div 
                      key={prize.id}
                      className={`p-3 rounded-lg border ${prize.id === wonPrize.id ? 'border-primary bg-primary/10' : 'border-border'}`}
                    >
                      <div className="flex items-center space-x-2">
                        <span className="text-2xl">{prize.icon}</span>
                        <div className="flex-1 min-w-0">
                          <div className="text-sm font-medium truncate">{prize.name}</div>
                          <div className={`text-xs ${getRarityColor(prize.rarity)}`}>
                            {prize.rarity} ({prize.chance}%)
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="flex space-x-2">
                <Button onClick={closeDialog} className="flex-1">
                  –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–∑
                </Button>
                <Button 
                  onClick={() => {
                    closeDialog();
                    setTimeout(() => selectedCase && openCase(selectedCase), 100);
                  }} 
                  variant="outline"
                  className="flex-1"
                  disabled={balance < (selectedCase?.price || 0)}
                >
                  –û—Ç–∫—Ä—ã—Ç—å –µ—â–µ
                </Button>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}