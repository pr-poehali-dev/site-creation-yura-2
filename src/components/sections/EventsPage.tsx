import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';

interface Event {
  id: number;
  title: string;
  description: string;
  type: string;
  startDate: string;
  endDate: string;
  reward: string;
  participants: number;
  maxParticipants: number;
  icon: string;
  status: string;
}

interface SeasonalLocation {
  id: number;
  name: string;
  description: string;
  x: number;
  y: number;
  icon: string;
  color: string;
  availableUntil: string;
  rewards: string[];
}

export default function EventsPage() {
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);

  const activeEvents: Event[] = [
    {
      id: 1,
      title: '–û—Ö–æ—Ç–∞ –Ω–∞ –ê–ª—å—Ñ–∞-—Ö–∏—â–Ω–∏–∫–∞',
      description: '–ù–∞–π–¥–∏—Ç–µ –∏ —É–±–µ–π—Ç–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ê–ª—å—Ñ–∞-–†–µ–∫—Å–∞. –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º 10 –∏–≥—Ä–æ–∫–∞–º.',
      type: 'PvE',
      startDate: '01.10.2024',
      endDate: '07.10.2024',
      reward: '10,000 ü™ô + –Ø–π—Ü–æ –ê–ª—å—Ñ–∞-–†–µ–∫—Å–∞',
      participants: 47,
      maxParticipants: 100,
      icon: 'ü¶ñ',
      status: 'active'
    },
    {
      id: 2,
      title: '–ö–ª–∞–Ω–æ–≤—ã–µ –≤–æ–π–Ω—ã',
      description: '–°—Ä–∞–∂–∞–π—Ç–µ—Å—å –∑–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –∏ —Ä–µ—Å—É—Ä—Å—ã. –ü–æ–±–µ–¥–∏–≤—à–∏–π –∫–ª–∞–Ω –ø–æ–ª—É—á–∞–µ—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.',
      type: 'PvP',
      startDate: '30.09.2024',
      endDate: '14.10.2024',
      reward: '50,000 ü™ô –¥–ª—è –∫–ª–∞–Ω–∞',
      participants: 156,
      maxParticipants: 200,
      icon: '‚öîÔ∏è',
      status: 'active'
    },
    {
      id: 3,
      title: '–ì–æ–Ω–∫–∞ –Ω–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ',
      description: '–ü—Ä–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –æ–ø–∞—Å–Ω—ã–µ –∑–æ–Ω—ã –∫–∞—Ä—Ç—ã –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –≤—ã–∂–∏–≤—É—Ç.',
      type: 'Race',
      startDate: '02.10.2024',
      endDate: '02.10.2024',
      reward: '5,000 ü™ô + –°–∫–∏–Ω—ã',
      participants: 89,
      maxParticipants: 150,
      icon: 'üèÉ',
      status: 'active'
    },
    {
      id: 4,
      title: '–ù–æ—á—å —Ö–∏—â–Ω–∏–∫–æ–≤',
      description: '–û—Å–æ–±–æ–µ —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö–∏—â–Ω–∏–∫–æ–≤. –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —É–±–∏–π—Å—Ç–≤–∞.',
      type: 'Special',
      startDate: '03.10.2024',
      endDate: '04.10.2024',
      reward: '3,000 ü™ô –∑–∞ —É–±–∏–π—Å—Ç–≤–æ',
      participants: 234,
      maxParticipants: 300,
      icon: 'üåô',
      status: 'active'
    }
  ];

  const upcomingEvents: Event[] = [
    {
      id: 5,
      title: '–¢—É—Ä–Ω–∏—Ä —á–µ–º–ø–∏–æ–Ω–æ–≤',
      description: '–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ —Å—Ä–∞–∑—è—Ç—Å—è –≤ –∞—Ä–µ–Ω–µ. –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å—Ç–∞–Ω–µ—Ç —á–µ–º–ø–∏–æ–Ω–æ–º —Å–µ–∑–æ–Ω–∞.',
      type: 'Tournament',
      startDate: '15.10.2024',
      endDate: '15.10.2024',
      reward: '100,000 ü™ô + –¢–∏—Ç—É–ª',
      participants: 0,
      maxParticipants: 64,
      icon: 'üèÜ',
      status: 'upcoming'
    },
    {
      id: 6,
      title: '–ó–∏–º–Ω–∏–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å',
      description: '–û—Å–æ–±—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏, –Ω–æ–≤—ã–µ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.',
      type: 'Festival',
      startDate: '01.12.2024',
      endDate: '31.12.2024',
      reward: '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Å–∫–∏–Ω—ã',
      participants: 0,
      maxParticipants: 1000,
      icon: '‚ùÑÔ∏è',
      status: 'upcoming'
    }
  ];

  const seasonalLocations: SeasonalLocation[] = [
    {
      id: 1,
      name: '–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∞—è –ø–µ—â–µ—Ä–∞',
      description: '–û–ø–∞—Å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è —Å –ª–∞–≤–æ–π –∏ —Ä–µ–¥–∫–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏',
      x: 35,
      y: 25,
      icon: 'üåã',
      color: 'bg-red-600',
      availableUntil: '15.10.2024',
      rewards: ['–û–±—Å–∏–¥–∏–∞–Ω', '–û–≥–Ω–µ–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª', '–†–µ–¥–∫–∏–µ —è–π—Ü–∞']
    },
    {
      id: 2,
      name: '–õ–µ–¥—è–Ω–∞—è –ø—É—Å—Ç–æ—à—å',
      description: '–ó–∞–º–µ—Ä–∑—à–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º–∏',
      x: 70,
      y: 15,
      icon: '‚ùÑÔ∏è',
      color: 'bg-blue-400',
      availableUntil: '20.10.2024',
      rewards: ['–õ–µ–¥—è–Ω–∞—è —à–∫—É—Ä–∞', '–ú–∞–º–æ–Ω—Ç–æ–≤—ã–π –∫–ª—ã–∫', '–ú–æ—Ä–æ–∑–Ω—ã–π –∞–º—É–ª–µ—Ç']
    },
    {
      id: 3,
      name: '–ó–∞—Ç–µ—Ä—è–Ω–Ω—ã–µ —Ä—É–∏–Ω—ã',
      description: '–î—Ä–µ–≤–Ω—è—è —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏ –∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏',
      x: 45,
      y: 60,
      icon: 'üèõÔ∏è',
      color: 'bg-amber-600',
      availableUntil: '25.10.2024',
      rewards: ['–î—Ä–µ–≤–Ω–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç', '–ó–æ–ª–æ—Ç–æ', '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —è–π—Ü–æ']
    },
    {
      id: 4,
      name: '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω–∞—è –ø–µ—â–µ—Ä–∞',
      description: '–ü–µ—â–µ—Ä–∞ —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏ –∏ —Å–≤–µ—Ç—è—â–∏–º–∏—Å—è –≥—Ä–∏–±–∞–º–∏',
      x: 60,
      y: 70,
      icon: 'üíé',
      color: 'bg-purple-600',
      availableUntil: '30.10.2024',
      rewards: ['–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª', '–°–≤–µ—Ç—è—â–∏–π—Å—è –≥—Ä–∏–±', '–ó–µ–ª—å–µ —Å–∏–ª—ã']
    },
    {
      id: 5,
      name: '–û—Å—Ç—Ä–æ–≤ —Ö–∏—â–Ω–∏–∫–æ–≤',
      description: '–û—Å—Ç—Ä–æ–≤ –ø–æ–ª–Ω—ã–π –æ–ø–∞—Å–Ω—ã—Ö –∞–ª—å—Ñ–∞-—Ö–∏—â–Ω–∏–∫–æ–≤',
      x: 15,
      y: 85,
      icon: 'üèùÔ∏è',
      color: 'bg-green-700',
      availableUntil: '10.11.2024',
      rewards: ['–ê–ª—å—Ñ–∞-—Ç—Ä–æ—Ñ–µ–π', '–ü—Ä–µ–º–∏—É–º —è–π—Ü–∞', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ']
    }
  ];

  const getEventTypeColor = (type: string) => {
    switch (type) {
      case 'PvE': return 'bg-green-600';
      case 'PvP': return 'bg-red-600';
      case 'Race': return 'bg-blue-600';
      case 'Special': return 'bg-purple-600';
      case 'Tournament': return 'bg-yellow-600';
      case 'Festival': return 'bg-pink-600';
      default: return 'bg-gray-600';
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active': return <Badge className="bg-green-600">–ê–∫—Ç–∏–≤–Ω–æ</Badge>;
      case 'upcoming': return <Badge variant="outline">–°–∫–æ—Ä–æ</Badge>;
      default: return <Badge variant="secondary">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</Badge>;
    }
  };

  if (selectedEvent) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <Button variant="outline" onClick={() => setSelectedEvent(null)}>
            <Icon name="ArrowLeft" size={16} className="mr-2" />
            –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º
          </Button>
        </div>

        <Card className={`${getEventTypeColor(selectedEvent.type)}`}>
          <CardContent className="p-8 text-white">
            <div className="flex items-start justify-between">
              <div className="flex items-start space-x-4">
                <div className="text-8xl">{selectedEvent.icon}</div>
                <div>
                  <div className="flex items-center space-x-3 mb-2">
                    <h2 className="text-4xl font-bold">{selectedEvent.title}</h2>
                    {getStatusBadge(selectedEvent.status)}
                  </div>
                  <p className="text-white/90 text-lg mb-4">{selectedEvent.description}</p>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-white/70">–ù–∞—á–∞–ª–æ:</span>
                      <div className="font-semibold">{selectedEvent.startDate}</div>
                    </div>
                    <div>
                      <span className="text-white/70">–û–∫–æ–Ω—á–∞–Ω–∏–µ:</span>
                      <div className="font-semibold">{selectedEvent.endDate}</div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>üéÅ –ù–∞–≥—Ä–∞–¥–∞</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-primary">{selectedEvent.reward}</div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>{selectedEvent.participants} / {selectedEvent.maxParticipants}</span>
                  <span>{Math.round((selectedEvent.participants / selectedEvent.maxParticipants) * 100)}%</span>
                </div>
                <Progress value={(selectedEvent.participants / selectedEvent.maxParticipants) * 100} />
              </div>
            </CardContent>
          </Card>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>üìã –ü—Ä–∞–≤–∏–ª–∞ —Å–æ–±—ã—Ç–∏—è</CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex items-start space-x-2">
              <Icon name="Check" size={16} className="mt-0.5 text-primary" />
              <span>–°–æ–±—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —É—Ä–æ–≤–Ω—è 20+</span>
            </div>
            <div className="flex items-start space-x-2">
              <Icon name="Check" size={16} className="mt-0.5 text-primary" />
              <span>–ú–æ–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–ª–æ</span>
            </div>
            <div className="flex items-start space-x-2">
              <Icon name="Check" size={16} className="mt-0.5 text-primary" />
              <span>–ù–∞–≥—Ä–∞–¥—ã –≤—ã–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</span>
            </div>
            <div className="flex items-start space-x-2">
              <Icon name="Check" size={16} className="mt-0.5 text-primary" />
              <span>–û–¥–∏–Ω –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑</span>
            </div>
          </CardContent>
        </Card>

        {selectedEvent.status === 'active' && (
          <Button size="lg" className="w-full">
            <Icon name="Play" size={20} className="mr-2" />
            –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ
          </Button>
        )}
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-4xl font-bold mb-4">üéâ –°–æ–±—ã—Ç–∏—è</h2>
        <p className="text-muted-foreground">–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</p>
      </div>

      <Tabs defaultValue="active" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ ({activeEvents.length})</TabsTrigger>
          <TabsTrigger value="upcoming">–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ ({upcomingEvents.length})</TabsTrigger>
          <TabsTrigger value="locations">–°–µ–∑–æ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ ({seasonalLocations.length})</TabsTrigger>
        </TabsList>

        <TabsContent value="active" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {activeEvents.map((event) => (
              <Card 
                key={event.id} 
                className="hover:shadow-lg transition-all duration-300 cursor-pointer"
                onClick={() => setSelectedEvent(event)}
              >
                <CardHeader className={`${getEventTypeColor(event.type)} text-white`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="text-4xl">{event.icon}</div>
                      <div>
                        <CardTitle className="text-xl">{event.title}</CardTitle>
                        <CardDescription className="text-white/80">{event.type}</CardDescription>
                      </div>
                    </div>
                    {getStatusBadge(event.status)}
                  </div>
                </CardHeader>
                <CardContent className="space-y-4 pt-6">
                  <p className="text-sm text-muted-foreground line-clamp-2">{event.description}</p>
                  
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="text-muted-foreground">–ù–∞—á–∞–ª–æ</div>
                      <div className="font-semibold">{event.startDate}</div>
                    </div>
                    <div>
                      <div className="text-muted-foreground">–û–∫–æ–Ω—á–∞–Ω–∏–µ</div>
                      <div className="font-semibold">{event.endDate}</div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>–£—á–∞—Å—Ç–Ω–∏–∫–∏</span>
                      <span className="font-semibold">{event.participants}/{event.maxParticipants}</span>
                    </div>
                    <Progress value={(event.participants / event.maxParticipants) * 100} />
                  </div>

                  <div className="pt-2 border-t">
                    <div className="text-xs text-muted-foreground">–ù–∞–≥—Ä–∞–¥–∞:</div>
                    <div className="font-semibold text-primary">{event.reward}</div>
                  </div>

                  <Button className="w-full">
                    <Icon name="Eye" size={16} className="mr-2" />
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="upcoming" className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {upcomingEvents.map((event) => (
              <Card 
                key={event.id} 
                className="hover:shadow-lg transition-all duration-300 cursor-pointer opacity-90"
                onClick={() => setSelectedEvent(event)}
              >
                <CardHeader className={`${getEventTypeColor(event.type)} text-white`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="text-4xl">{event.icon}</div>
                      <div>
                        <CardTitle className="text-xl">{event.title}</CardTitle>
                        <CardDescription className="text-white/80">{event.type}</CardDescription>
                      </div>
                    </div>
                    {getStatusBadge(event.status)}
                  </div>
                </CardHeader>
                <CardContent className="space-y-4 pt-6">
                  <p className="text-sm text-muted-foreground line-clamp-2">{event.description}</p>
                  
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="text-muted-foreground">–ù–∞—á–∞–ª–æ</div>
                      <div className="font-semibold">{event.startDate}</div>
                    </div>
                    <div>
                      <div className="text-muted-foreground">–û–∫–æ–Ω—á–∞–Ω–∏–µ</div>
                      <div className="font-semibold">{event.endDate}</div>
                    </div>
                  </div>

                  <div className="pt-2 border-t">
                    <div className="text-xs text-muted-foreground">–ù–∞–≥—Ä–∞–¥–∞:</div>
                    <div className="font-semibold text-primary">{event.reward}</div>
                  </div>

                  <Button className="w-full" variant="outline">
                    <Icon name="Bell" size={16} className="mr-2" />
                    –ù–∞–ø–æ–º–Ω–∏—Ç—å
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="locations" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>üó∫Ô∏è –°–µ–∑–æ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ</CardTitle>
              <CardDescription>–û—Å–æ–±—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="relative w-full aspect-square bg-gray-900 rounded-lg overflow-hidden">
                <img 
                  src="https://cdn.poehali.dev/files/a38310ff-24f6-4b88-9b16-8ba3227b3b68.png" 
                  alt="Seasonal Locations Map"
                  className="w-full h-full object-cover"
                />

                {seasonalLocations.map((location) => (
                  <div
                    key={location.id}
                    className="absolute transform -translate-x-1/2 -translate-y-1/2 cursor-pointer group"
                    style={{ left: `${location.x}%`, top: `${location.y}%` }}
                  >
                    <div className={`w-12 h-12 rounded-full ${location.color} flex items-center justify-center text-2xl shadow-2xl border-4 border-white group-hover:scale-125 transition-transform animate-pulse`}>
                      {location.icon}
                    </div>
                    <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-10">
                      <div className="bg-black/90 backdrop-blur-sm border border-white/30 rounded-lg p-3 shadow-2xl whitespace-nowrap">
                        <div className="font-bold text-sm text-white">{location.name}</div>
                        <div className="text-xs text-gray-300">{location.description}</div>
                        <div className="text-xs text-yellow-400 mt-1">–î–æ: {location.availableUntil}</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {seasonalLocations.map((location) => (
              <Card key={location.id} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className={`w-12 h-12 rounded-full ${location.color} flex items-center justify-center text-2xl`}>
                        {location.icon}
                      </div>
                      <CardTitle className="text-lg">{location.name}</CardTitle>
                    </div>
                  </div>
                  <CardDescription>{location.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-3">
                  <div className="flex items-center space-x-2 text-sm">
                    <Icon name="Clock" size={14} className="text-primary" />
                    <span>–î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ: <span className="font-semibold">{location.availableUntil}</span></span>
                  </div>
                  
                  <div>
                    <div className="text-xs text-muted-foreground mb-2">–ù–∞–≥—Ä–∞–¥—ã:</div>
                    <div className="flex flex-wrap gap-1">
                      {location.rewards.map((reward, index) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {reward}
                        </Badge>
                      ))}
                    </div>
                  </div>

                  <Button size="sm" className="w-full">
                    <Icon name="MapPin" size={14} className="mr-2" />
                    –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}